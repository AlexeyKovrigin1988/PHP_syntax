Создайте абстрактный класс для хранилища Storage. Пусть данный класс содержит следующие абстрактные методы: 
create — создать объект в хранилище. Метод получает на вход объект, который нужно сохранить, и после сохранения возвращает уникальный идентификатор;
read — получить объект из хранилища. Метод принимает на вход id или slug (любое из значений) объекта и возвращает объект;
update — обновить существующий объект в хранилище. Метод принимает на вход три параметра: id или slug (любое из значений) существующего объекта и сам обновлённый объект, который нужно сохранить;
delete — удалить объект из хранилища. Метод принимает на вход id или slug объекта, который нужно удалить из хранилища;
list — возвращает массив всех объектов в хранилище. 
Создайте абстрактный класс для представления View. Этот класс должен содержать поле $storage, которому будет присвоен объект одного из дочерних классов Storage. Присвоение нужно реализовать в конструкторе, передав объект подкласса Storage в качестве параметра конструктора.
Пусть класс Viewсодержит следующие абстрактные методы:
displayTextById — вывести текст, принимает id в качестве параметра; 
displayTextByUrl — вывести текст, принимает url в качестве параметра.
Создайте абстрактный класс User. Пусть данный класс содержит поля:
$id — уникальный идентификатор (целое число);
$name — имя;
$role — название роли (автор или администратор);
и абстрактный метод getTextsToEdit, который выводит список текстов, доступных пользователю для редактирования.
Реализуем класс «Файл» (FileStorage) для абстрактного класса Storage.
Реализуем метод create — сохраняет сериализованный объект класса TelegraphText. Имя файла должно соответствовать полю $slug (объекта класса TelegraphText) + _ + текущая дата. Если файл существует (для проверки используйте file_exists), то к имени файла добавьте _1. Если и такой файл существует — _2, и так до тех пор, пока имя файла не окажется уникальным. Перед тем, как записывать объект класса TelegraphText в файл, переопределите его поле slug в соответствии с именем файла. Для FileStorage метод create возвращает значение slug.
Read — возвращает объект класса TelegraphText. Используйте slug для поиска соответствующего файла.
Update — используйте slug для поиска соответствующего файла. Не забывайте сериализовать объект перед сохранением. 
Delete — используйте slug для поиска соответствующего файла.
List — получите список файлов в директории, извлеките из них объекты класса TelegraphText (с помощью десериализации) и положите в массив. Метод list возвращает массив объектов класса Text. Для сканирования директории используйте встроенную функцию scandir.
Выполните по желанию: попробуйте в методах loadText и storeText класса TelegraphText использовать объект класса FileStorage. Сам объект передайте в качестве параметра конструктора класса TelegraphText.
